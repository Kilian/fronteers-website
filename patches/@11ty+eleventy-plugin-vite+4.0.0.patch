diff --git a/node_modules/@11ty/eleventy-plugin-vite/EleventyVite.js b/node_modules/@11ty/eleventy-plugin-vite/EleventyVite.js
index cb546a0..5e785ad 100644
--- a/node_modules/@11ty/eleventy-plugin-vite/EleventyVite.js
+++ b/node_modules/@11ty/eleventy-plugin-vite/EleventyVite.js
@@ -49,7 +49,10 @@ class EleventyVite {
     let tmp = path.resolve(".", this.options.tempFolderName);
 
     await fsp.mkdir(tmp, { recursive: true });
-    await fsp.rename(this.outputDir, tmp);
+
+    // see https://github.com/11ty/eleventy-plugin-vite/issues/22#issuecomment-1539443517
+    await fsp.cp(this.outputDir, tmp, { recursive: true });
+    await fsp.rm(this.outputDir, { recursive: true });
 
     try {
       let viteOptions = lodashMerge({}, this.options.viteOptions);
@@ -59,11 +62,13 @@ class EleventyVite {
         .filter(entry => !!entry.outputPath) // filter out `false` serverless routes
         .filter(entry => (entry.outputPath || "").endsWith(".html")) // only html output
         .map(entry => {
-          if(!entry.outputPath.startsWith(this.outputDir + path.sep)) {
+          // see https://github.com/11ty/eleventy/blob/8e88b0786b4330182020dd0a7bc602ff774869f6/src/TemplatePermalink.js#L194
+          //
+          if(!entry.outputPath.startsWith(this.outputDir + '/')) {
             throw new Error(`Unexpected output path (was not in output directory ${this.outputDir}): ${entry.outputPath}`);
           }
 
-          return path.resolve(tmp, entry.outputPath.substr(this.outputDir.length + path.sep.length));
+          return path.resolve(tmp, entry.outputPath.substr(this.outputDir.length + '/'.length));
         });
 
       viteOptions.build.outDir = path.resolve(".", this.outputDir);
@@ -71,7 +76,9 @@ class EleventyVite {
       await buildVite(viteOptions);
     } catch(e) {
       console.warn( `[11ty] Encountered a Vite build error, restoring original Eleventy output to ${this.outputDir}`, e );
-      await fsp.rename(tmp, this.outputDir);
+      // see https://github.com/11ty/eleventy-plugin-vite/issues/22#issuecomment-1539443517
+      await fsp.cp(tmp, this.outputDir, { recursive: true });
+      await fsp.rm(tmp, { recursive: true });
       throw e;
     } finally {
       // remove the tmp dir
